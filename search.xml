<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[markdown语法指南]]></title>
      <url>https://jane0219.github.io/2016/09/25/markdown%E8%AF%AD%E6%B3%95%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<h3 id="markdown语法指南"><a href="#markdown语法指南" class="headerlink" title="markdown语法指南"></a>markdown语法指南</h3><hr>
<h4 id="入门说明："><a href="#入门说明：" class="headerlink" title="入门说明："></a>入门说明：</h4><hr>
<p>定义：markdown 是一种轻量级标记语言，可以使用普通文本编辑器进行编辑的纯文本编辑语言。它可以把一篇纯文本文章转化为富文本，让读者得到清晰明了的阅读体验。<br>用途：markdown的语法简洁明了，所以很多人用它来写博客，就像我一样。</p>
<a id="more"></a>
<p>  它还可以用来编写说明文档，比如很多的readme文档都是用它写的。</p>
<p>除此之外因为我们还有markdownPad和马克飞象这样的工具，所以我们可以随意将自己写的文件输出为html文件、或者psd文件等。</p>
<h4 id="语法指南"><a href="#语法指南" class="headerlink" title="语法指南"></a>语法指南</h4><hr>
<h5 id="（一）特殊字符处理"><a href="#（一）特殊字符处理" class="headerlink" title="（一）特殊字符处理"></a>（一）特殊字符处理</h5><p>在html文件中，有两个字符需要特殊处理，那就是：&lt; 和&amp;   。“&lt;”符号在html里是用作一个标签的开始符号，而“&amp;”符号用于标记html实体，<code>&amp;lt;</code>代表”&lt;”。<br>而markdown让你更自然的书写字符，需要转换的它会处理好。它会保留原状。</p>
<hr>
<h5 id="（二）换行"><a href="#（二）换行" class="headerlink" title="（二）换行"></a>（二）换行</h5><p>这里的换行方法是要分情况的;</p>
<h6 id="（1）六级标题下的换行"><a href="#（1）六级标题下的换行" class="headerlink" title="（1）六级标题下的换行"></a>（1）六级标题下的换行</h6><p>只需要回车（enter）一下就可以了换行了，so easy~</p>
<h6 id="（2）其他格式下"><a href="#（2）其他格式下" class="headerlink" title="（2）其他格式下"></a>（2）其他格式下</h6><p>不是六级标题下的话就需要，在你现在所在行敲两个或两个以上空格，或者一个tab键，再回车才可以实现换行。</p>
<hr>
<h5 id="（三）文字加粗"><a href="#（三）文字加粗" class="headerlink" title="（三）文字加粗"></a>（三）文字加粗</h5><h6 id="（1）利用-“-”-加粗"><a href="#（1）利用-“-”-加粗" class="headerlink" title="（1）利用  “#”  加粗"></a>（1）利用  “#”  加粗</h6><p>在markdown里要实现六级标题很简单，只要在你所写的文字前面加上  “#”  就可以。一个  “#”  号代表一级标题，一次两个代表二级标题……（#后面要加一个空格）例如：</p>
<pre><code># 我是一级标题
## 我是二级标题
### 我是三级标题 
</code></pre><p>对应效果：<br><img src="/images/1474192521970.png" alt="Alt text"></p>
<h6 id="（2）利用下滑线-“-”或者-“—”"><a href="#（2）利用下滑线-“-”或者-“—”" class="headerlink" title="（2）利用下滑线  “===”或者 “—”"></a>（2）利用下滑线  “===”或者 “—”</h6><p>a.  “==”  出来的效果是一级标题<br>例如：</p>
<p><img src="/images/1474193802503.png" alt="Alt text"></p>
<p>b.  “–”出来的效果是二级标题<br><img src="/images/1474194148265.png" alt="Alt text"></p>
<p><span style="font-size:20px;">*</span>注意：无论是用双下滑线还是单下划线 ，都需要写两个或者两个以上才可以。</p>
<p>c.  用<strong>     </strong>包起来，比如：<br><code>**hello**</code><br>效果：<strong>hello</strong><br>d.  用<strong>       </strong>包起来，比如：<br><code>__hello__</code><br>效果：<strong>hello</strong><br>注：前后都是两个_或者*，如果是一个的话显示斜体。</p>
<hr>
<h5 id="（四）区块引用"><a href="#（四）区块引用" class="headerlink" title="（四）区块引用"></a>（四）区块引用</h5><p> markdown标记区块引用是使用类似email中的用&gt;的引用方式。如果你还熟悉在email新建中的引言部分，你就知道怎么在markdown中进行引用了。例如：</p>
<pre><code>&gt;假如生活欺骗了你 不要悲伤 反正明天也一样  --李晓宁
&gt; 生活不止眼前的苟且 还有读不懂的诗和到不了的远方  --李晓宁
</code></pre><p>  对应效果：</p>
<blockquote>
<p>假如生活欺骗了你  不要悲伤  反正明天也一样  –李晓宁<br>生活不止眼前的苟且  还有读不懂的诗和到不了的远方  –李晓宁</p>
</blockquote>
<h6 id="（a）区块引用可以嵌套-比如："><a href="#（a）区块引用可以嵌套-比如：" class="headerlink" title="（a）区块引用可以嵌套  比如："></a>（a）区块引用可以嵌套  比如：</h6><pre><code>&gt;生活不止眼前的苟且
   &gt;&gt;还有读不懂的诗和到不了的远方
</code></pre><p>效果：</p>
<blockquote>
<p>生活不止眼前的苟且</p>
<blockquote>
<p>还有读不懂的诗和到不了的远方</p>
</blockquote>
</blockquote>
<h6 id="（b）引用的区块内也可以使用其他的-Markdown-语法，包括标题、列表、代码区块等："><a href="#（b）引用的区块内也可以使用其他的-Markdown-语法，包括标题、列表、代码区块等：" class="headerlink" title="（b）引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等："></a>（b）引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</h6><pre><code>&gt;###生活不止眼前的苟且
    &gt;&gt;好友读不懂的诗和到不了的远方
</code></pre><p>效果：</p>
<blockquote>
<h3 id="生活不止眼前的苟且"><a href="#生活不止眼前的苟且" class="headerlink" title="生活不止眼前的苟且"></a>生活不止眼前的苟且</h3><blockquote>
<p>还有读不懂的诗和到不了的远方</p>
<hr>
<h5 id="（五）列表"><a href="#（五）列表" class="headerlink" title="（五）列表"></a>（五）列表</h5><h6 id="（1）无序列表："><a href="#（1）无序列表：" class="headerlink" title="（1）无序列表："></a>（1）无序列表：</h6><p>a.用  “+”  号做标记（“+” 号后一定要有空格）  例如：<br><code>+ 我的生活</code><br><code>+ 我的爱好</code></p>
</blockquote>
</blockquote>
<p>效果：</p>
<ul>
<li>我的生活</li>
<li>我的爱好</li>
</ul>
<p>b. 用 “-” 号做标记（后面也要有空格） 例如：<br><code>- 我的生活</code><br><code>- 我的爱好</code></p>
<p>效果：</p>
<ul>
<li>我的生活</li>
<li>我的爱好</li>
</ul>
<p>c.用  “<em>”  做标记（记得空格） 例如：<br>``</em> 我的生活<code>``* 我的爱好</code></p>
<p> 效果：</p>
<ul>
<li>我的生活</li>
<li>我的爱好</li>
</ul>
<h6 id="（2）有序列表"><a href="#（2）有序列表" class="headerlink" title="（2）有序列表"></a>（2）有序列表</h6><p>使用数字接着一个英文句号就OK  比如：</p>
<ol>
<li>小狗</li>
<li>小猫</li>
<li>小猪</li>
</ol>
<p>*注意：若是往列表里嵌入代码块，要首行做进至少8个空格或两个制表符。</p>
<hr>
<h5 id="（六）代码块"><a href="#（六）代码块" class="headerlink" title="（六）代码块"></a>（六）代码块</h5><h6 id="（1）用英文状态下的-nbsp-nbsp-引起来-例如："><a href="#（1）用英文状态下的-nbsp-nbsp-引起来-例如：" class="headerlink" title="（1）用英文状态下的 ``  &nbsp;&nbsp;  ``引起来,例如："></a>（1）用英文状态下的 ``  &nbsp;&nbsp;  ``引起来,例如：</h6><p><img src="/images/1474380803358.png" alt="Alt text"></p>
<p>效果：<br><img src="/images/1474380814707.png" alt="Alt text"></p>
<h6 id="（2）一个tab键或者三个以上空格之后再回车就会生成一个代码块，会自带高亮和背景。"><a href="#（2）一个tab键或者三个以上空格之后再回车就会生成一个代码块，会自带高亮和背景。" class="headerlink" title="（2）一个tab键或者三个以上空格之后再回车就会生成一个代码块，会自带高亮和背景。"></a>（2）一个tab键或者三个以上空格之后再回车就会生成一个代码块，会自带高亮和背景。</h6><p>比如：(注意前边空格)<br> &nbsp;&nbsp;&nbsp;&nbsp;<br> <code>&lt;p&gt;nihao&lt;/p&gt;</code></p>
<pre><code>&lt;p&gt;nihao&lt;/p&gt;
</code></pre><hr>
<h5 id="（七）插入图片"><a href="#（七）插入图片" class="headerlink" title="（七）插入图片"></a>（七）插入图片</h5><p> Markdown 使用一种和链接（一会我们会讲）很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。</p>
<h6 id="（1）行内式"><a href="#（1）行内式" class="headerlink" title="（1）行内式"></a>（1）行内式</h6><p>语法：! [图片标题] (图片地址)<br>例如：</p>
<pre><code>! [&quot;小女孩&quot;](/images/avatar.jpg)
</code></pre><p>效果：<br><img src="/images/avatar.jpg" alt="&quot;小女孩&quot;"></p>
<h6 id="（2）参考式"><a href="#（2）参考式" class="headerlink" title="（2）参考式"></a>（2）参考式</h6><p>语法：! <a href="/images/avatar.jpg">图片标题</a><br></p>
<pre><code>[id]:url
</code></pre><p>例如：</p>
<pre><code>! [&quot;小女孩&quot;](/images/avatar.jpg)
</code></pre><p>效果：<br><img src="/images/avatar.jpg" alt="&quot;小女孩&quot;"></p>
<hr>
<p>#####（八）超链接<br>超链接的语法格式跟插入图片的格式很是相似，它也有两种链接方式：行内式和参考式<br>语法分别和图片语法相似（这里就不做详细说明，相信大家都能懂）</p>
<h6 id="1-行内式"><a href="#1-行内式" class="headerlink" title="1.行内式"></a>1.行内式</h6><p>[链接文字] (链接地址)</p>
<h6 id="2-参考式"><a href="#2-参考式" class="headerlink" title="2.参考式"></a>2.参考式</h6><p>[链接文字]  <code>[</code><a href="/images/avatar.jpg">id</a><code>]</code><br><code>[</code>id<code>]</code>:链接地址</p>
<hr>
<h5 id="（九）分割线"><a href="#（九）分割线" class="headerlink" title="（九）分割线"></a>（九）分割线</h5><p>生成分割线的方式有很多种，下面给大家介绍几种通用的方式：<br><code>***</code>(三个或三个以上“ * ”连写)<br><code>---</code>（三个或三个以上“ - ”连写）(连接线)<br><code>___</code>（三个或三个以上“ _”连写）(下滑线)</p>
<h2 id="效果分别是："><a href="#效果分别是：" class="headerlink" title=" 效果分别是："></a> 效果分别是：</h2><hr>
<hr>
<h5 id="（十）表格"><a href="#（十）表格" class="headerlink" title="（十）表格"></a>（十）表格</h5><p>对于markdown我唯一觉得不怎么舒服的地方就是表格的编写，这是一个比较累人的地方，它的书写格式有点麻烦，在这个方面它就没有html简单了。下面是markdown书写表格的语法格式：</p>
<pre><code>|table|Are |cool|
|-----|----|----|
|name |age |addr|
</code></pre><p>效果如下：<br> |table|Are|cool|<br> |—–|—|—|<br> |name|age|addr|<br> |name|age|addr|</p>
<hr>
<h5 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h5><p>以上是一些比较常用的markdown语法的使用介绍，希望对大家学习markdown能带来帮助。如果有好的提议，欢迎大家跟我一起交流。</p>
<p>本人博客：<a href="http://lxning.club" target="_blank" rel="external">http://lxning.club</a><br>邮箱：lxningdou@163.com</p>
<p>出自：李晓宁</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git命令和错误集锦]]></title>
      <url>https://jane0219.github.io/2016/09/25/Git%20%E5%91%BD%E4%BB%A4%E5%92%8C%E9%94%99%E8%AF%AF%E9%9B%86%E9%94%A6/</url>
      <content type="html"><![CDATA[<h3 id="Git-命令和错误集锦"><a href="#Git-命令和错误集锦" class="headerlink" title="Git 命令和错误集锦"></a>Git 命令和错误集锦</h3><hr>
<h4 id="前话：安装git"><a href="#前话：安装git" class="headerlink" title="前话：安装git"></a>前话：安装git</h4><p>官方网站下载：<br><a href="http://code.google.com/p/msysgit/downloads/list" target="_blank" rel="external">http://code.google.com/p/msysgit/downloads/list</a></p>
<p> 下载安装包后，打开执行，然后一路next.<br> 安装完成后，在桌面右键会出现 git bash here的标志和字样，说明安装成功。<br><a id="more"></a><br>然后我们就需要与远程的github相连接，才能进行本地管理。这仅需要三步：<br><code>$ git config --global user.name 你的github名称</code><br><code>$ git config --global user.email 你注册github的邮箱</code></p>
<p> 注意：这里的–global代表你电脑的所有本地仓库都会使用你的这个配置。</p>
<p>然后执行 $ssh-keygen -t rsa -C “你的邮箱”这里会让你输入密码，我们选择默认直接enter就行，不然之后可能会报错。<br>执行完后这时候会在你的电脑的 C/用户/Adiministor/.ssh/id_rsa.pub 生成这个key文件（id_rsa.pub）<br><img src="/images/1474722294367.png" alt="Alt text"></p>
<p>找到打开它，复制里面的代码然后到你的github上，右侧点击头像下面的setting<br><img src="/images/1474722248866.png" alt="Alt text"><br>然后点击左边栏的SSH and GPG key<br><img src="/images/1474722385417.png" alt="Alt text"><br>然后点击new SSH key进行key添加，把你电脑上的key粘贴到key下面的内容区，然后点 add ssh key<br><img src="/images/1474722569368.png" alt="Alt text"></p>
<p>至此你本地已经和github链接上了</p>
<hr>
<h4 id="（一）向远端提交项目："><a href="#（一）向远端提交项目：" class="headerlink" title="（一）向远端提交项目："></a>（一）向远端提交项目：</h4><h6 id="如果之前没有建立本地仓库的话先执行这里："><a href="#如果之前没有建立本地仓库的话先执行这里：" class="headerlink" title="如果之前没有建立本地仓库的话先执行这里："></a>如果之前没有建立本地仓库的话先执行这里：</h6><p>在桌面右击 git bash here   //（已经装过git了）<br>mkdir 文件夹名   //新建文件夹（作为本地仓库）<code>比如：mkdir project</code><br> cd project           //进入文件夹<br>git init             //初始化本地仓库</p>
<h6 id="如果已经有本地仓库了，从这部开始就行"><a href="#如果已经有本地仓库了，从这部开始就行" class="headerlink" title="如果已经有本地仓库了，从这部开始就行:"></a>如果已经有本地仓库了，从这部开始就行:</h6><p>git add 文件名/<em>  ( “ </em> ” 代表所有文件)<br>git commit –m “解释说明” （解释必须带上，避免进入文件编辑界面，如果进去了按ESC 然后：wq,再回车）<br>git remote add origin 远程地址 //建立远程连接<br>git push –set-upstream origin master<br>git push</p>
<p>至此如果没有出错的话文件就提交到远程版本库了</p>
<hr>
<h4 id="（二）建立分支："><a href="#（二）建立分支：" class="headerlink" title="（二）建立分支："></a>（二）建立分支：</h4><p>提醒：一般工作之后master上边的东西我们是没有权限更改的（那是QA的辖域），所以在master基础上需要建立自己的分支，在自己的分支上对项目进行更改。</p>
<h5 id="分值操作："><a href="#分值操作：" class="headerlink" title="分值操作："></a>分值操作：</h5><p>git checkout –b 分支名  //在master基础上复制一条分支来，并切换到新分支上<br>git checkout 分支名   //切换到指定分支<br>git branch    //查看分支<br>git branch –a   //查看包括远程的（包括别人建立的）所有分支<br>git merge master   //将自己的项目与master上的东西进行合并（为了避免别人也更改了项目，master东西被更改了）</p>
<hr>
<h4 id="（三）常用命令："><a href="#（三）常用命令：" class="headerlink" title="（三）常用命令："></a>（三）常用命令：</h4><p>ls  //显示所在文件夹的所有文件<br>mkdir // 新建一个文件夹<br>touch  //新建一个文件(不是文件夹)<br>git status   //查看当前状态<br>rm 删除  //（慎用）</p>
<hr>
<h4 id="（四）提交文件常见错误："><a href="#（四）提交文件常见错误：" class="headerlink" title="（四）提交文件常见错误："></a>（四）提交文件常见错误：</h4><p>1  执行git remote add origin git@github.com:jane0219/test.git时报错：<br><code>fatal: remote origin already exists.</code><br>解决：执行git remote rm origin   //删除远程主机名</p>
<p>2.执行 git push 时报<br><code>fatal: The current branch master has no upstream branch.</code><br>解决：执行 git push –set-upstream origin master  //与远程master建立连接</p>
<p>3.执行git push –set-upstream origin master市报错：<br>        <code>! [rejected]        master -&gt; master (fetch first)  
error: failed to push some refs to &#39;git@github.com:jane0219/test.git&#39;</code></p>
<p>解决： git pull “远程地址” 再执行git add … //本地更改文件或者上传新文件前要先跟版本库的东西进行merge 合并，远程版本库有的东西本地仓库没有的话会报错（原因还不敢确定）</p>
<ol>
<li>git pull 时报错：<br><code>refusing to merge unrelated histories</code></li>
</ol>
<p>解决：执行git pull origin master –allow-unrelated-histories //让git接受合并跟之前的项目的 无关项（以前的文件里没有的东西）</p>
]]></content>
    </entry>
    
  
  
</search>
